package reader;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Period;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

import Util.DatabaseUtil;
import model.Borrow_Records;

/**
 * @author 马彧豪 16130120164 603337046@qq.com
 *
 * 2018年11月24日
 * @param <Borrow_Records>
 */
public class Readertool {

	/**
	 * 
	 *Readertool.java
	 */
	private List<Borrow_Records> Record_List= new ArrayList<>();
	public Object result[][]=new Object[10][5];
    public Object result1[][]=new Object[10][5];
    public Object result2[][]=new Object[100][5];
    public Object result3[][]=new Object[100][3];
    public Object result4[][]=new Object[100][4];
	
	public Readertool() {
		// TODO 自动生成的构造函数存根
		this.Load_Record();
	}
	
	public void selectbook_name(String book_name) {
		String sql = new String();
		sql="select * from books where book_name=?";
		int i=0;
		try {
			ResultSet rs = Select(sql, book_name);
			if(!rs.first()) {
				System.out.println("No this book");
				return;
			}
			do {
				 	result[i][0]=rs.getString("book_name");
	                result[i][1]=rs.getString("author");
	                result[i][2]=rs.getFloat("price");
	                result[i][3]=rs.getInt("sum");
	                result[i][4]=rs.getInt("result");
				System.out.print(rs.getString("book_id")+" "+rs.getString("book_name")+" "+rs.getString("book_type")+" ");
				System.out.print(rs.getString("author")+" "+rs.getFloat("price")+" "+rs.getInt("sum")+" "+rs.getInt("result")+" ");
				System.out.println(rs.getString("update_date"));
				i++;
			}while(rs.next());
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void selectbook_type(String book_type) {
		String sql = new String();
		sql="select * from books where book_type=?";
		int i=0;
		try {
			ResultSet rs = Select(sql, book_type);
			if(!rs.first()) {
				System.out.println("No this type");
				return;
			}
			do {
				result2[i][0]=rs.getString("book_name");
                result2[i][1]=rs.getString("author");
                result2[i][2]=rs.getFloat("price");
                result2[i][3]=rs.getInt("sum");
                result2[i][4]=rs.getInt("result");
				System.out.print(rs.getString("book_id")+" "+rs.getString("book_name")+" "+rs.getString("book_type")+" ");
				System.out.print(rs.getString("author")+" "+rs.getFloat("price")+" "+rs.getInt("sum")+" "+rs.getInt("result")+" ");
				System.out.println(rs.getString("update_date"));
				i++;
			}while(rs.next());
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void selectauthor_name(String author_name) {

		String sql = new String();
		sql="select * from books where author=?";
		int i=0;
		try {
			ResultSet rs = Select(sql, author_name);
			if(!rs.first()) {
				System.out.println("No this author :"+author_name);
				return;
			}
			do {
				
                result1[i][0]=rs.getString("book_name");
                result1[i][1]=rs.getString("author");
                result1[i][2]=rs.getFloat("price");
                result1[i][3]=rs.getInt("sum");
                result1[i][4]=rs.getInt("result");
				/*System.out.print(rs.getString("book_id")+" "+rs.getString("book_name")+" "+rs.getString("book_type")+" ");
				System.out.print(rs.getString("author")+" "+rs.getFloat("price")+" "+rs.getInt("sum")+" "+rs.getInt("result")+" ");
				System.out.println(rs.getString("update_date"));*/
                 i++;
			}while(rs.next());
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public String selectbook_id(String book_id) {

		String sql = new String();
		sql="select * from books where book_id=?";
		int i=0;

		try {
			ResultSet rs = Select(sql, book_id);
            if(!rs.first()) {
            	System.out.println("No this book "+book_id);
            	return "NO";
            }
            else {
			do {
				 	result3[i][0]=rs.getString("book_name");
	                result3[i][1]=rs.getString("author");
	                result3[i][2]=rs.getString("book_type");
				/*System.out.print(rs.getString("book_id")+" "+rs.getString("book_name")+" "+rs.getString("book_type")+" ");
				System.out.print(rs.getString("author")+" "+rs.getFloat("price")+" "+rs.getInt("sum")+" "+rs.getInt("result")+" ");
				System.out.println(rs.getString("update_date"));*/
	                i++;
			}while(rs.next());}
		}catch(Exception e) {
			e.printStackTrace();
		}
		return "YES";
	}
	
	public void checkhistory(Readers reader) {
		
		String sql = new String();
		sql="select * from borrow_record where borrow_reader_id=?";
		int i=0;

		try {
			ResultSet rs = Select(sql, reader.user_id);
			if(!rs.first()) {
				System.out.println("the reader "+reader.user_id+"no borrow record");
			}
			do {
				    result4[i][0]=rs.getString("borrow_book_id");
	                result4[i][1]=rs.getString("borrow_date");
	                result4[i][2]=rs.getString("return_date");
	                result4[i][3]=rs.getString("back_or_not");
				/*System.out.print(rs.getString("book_id")+" "+rs.getString("book_name")+" "+rs.getString("book_type")+" ");
				System.out.print(rs.getString("author")+" "+rs.getFloat("price")+" "+rs.getInt("sum")+" "+rs.getInt("result")+" ");
				System.out.println(rs.getString("update_date"));*/
	                i++;
			}while(rs.next());
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public String borrow(Readers reader,String id) {
		String result=new String();
		
		if(Integer.parseInt(reader.borrow_book_num)>=5) {
			System.out.println("You has borrowed five books");
			return "Full";
		}
		try {
			ResultSet r = Select("select result from books where book_id=?",id);
			if(!r.first()) {
				System.out.println("No this book "+id);
				return "NO";
			}
			result=r.getString("result");
			if(result.equals("0")) {
				System.out.println("the book "+id+"result 0.");
				return "NO";
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		Borrow_Records record = new Borrow_Records();
		
		record.setRecord_id(produce_recordid());
		record.setBorrow_reader_id(reader.user_id);
		record.setBorrow_book_id(id);
		record.setBorrow_date(getDate());
		record.setBack_or_not("NO");
		record.setDay_Of_Timeout("0");
		
		String sql = new String();
		
		sql="insert into borrow_record value(?,?,?,?,?,?,?)";
		int count=1;
		reader.borrow_book_num=Integer.toString(Integer.parseInt(reader.borrow_book_num)+count);
		result=Integer.toString(Integer.parseInt(result)-count);
		
		try {
			ResultSet rs=Select("select * from books where book_id=?",record.getBorrow_book_id());
			if(!rs.first()) {
				System.out.println("the book: "+record.getBorrow_book_id()+" isnot exist.");
				return "NO";
			}
			Update_result(result,record.getBorrow_book_id());
			Update_borrow(reader.borrow_book_num,reader.user_id);
			Update(sql,record.getRecord_id(),record.getBorrow_reader_id(),record.getBorrow_book_id(),record.getBorrow_date(),record.getReturn_date(),record.getBack_or_not(),record.getDay_Of_Timeout());
			Record_List.add(record);
		} catch (Exception e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
		return "YES";
	}
	
	public String produce_recordid() {
		String record_id = new String();
		Date now = new Date();
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd");
		record_id = sdf.format(now);
		record_id = record_id+String.valueOf(Record_List.size()+10000);
		return record_id;
	}
	
	public String getDate() {
		String borrow_date= new String();
		Date now = new Date();
		SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		borrow_date = f.format(now);
		return borrow_date;
	}
	
	public void back(Readers reader,String id) {
		
		String result=new String();
		try {
			ResultSet r = Select("select result from books where book_id=?",id);
			if(!r.first()) {
				System.out.println("No this book "+id);
				return;
			}
			result=r.getString("result");
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		Borrow_Records record = new Borrow_Records();
		
		try {
			ResultSet rs=Select("select record_id,borrow_date from borrow_record where borrow_book_id=? and borrow_reader_id=? and back_or_not=?",id,reader.user_id,"NO");
			if(!rs.first()) {
				System.out.println("The book: "+id+" you did not borrow.");
				return;
			}
			
			record.setRecord_id(rs.getString("record_id"));
			record.setBorrow_date(rs.getString("borrow_date"));
			
		} catch (SQLException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
		
		int timeout_num;
		float price;
		
		record.setBorrow_reader_id(reader.user_id);
		record.setReturn_date(getDate());
		record.setBorrow_book_id(id);
		record.setBack_or_not("YES");
		SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date now = new Date();
		int count= 1;
		reader.borrow_book_num=Integer.toString(Integer.parseInt(reader.borrow_book_num)-count);
		result=Integer.toString(Integer.parseInt(result)+count);
		
		try {
			Date borrow_time = f.parse(record.getBorrow_date());
			timeout_num=(int) ((now.getTime()-borrow_time.getTime())/(1000 * 60 * 60 * 24))-1;
			if(timeout_num<0) {
				timeout_num=0;
			}
			record.setDay_Of_Timeout(String.valueOf(timeout_num));
			price=(float) ((float) timeout_num*1.2);
			reader.balance = String.valueOf(Float.parseFloat(reader.balance)-price);
			System.out.println("you out deadline "+timeout_num+" days.");
			System.out.println("you should pay "+price+" yuan.");
		} catch (ParseException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
		
		Update_result(result,id);
		Update_back(reader.balance,reader.borrow_book_num,reader.user_id);
		Update("update borrow_record set return_date=?,back_or_not=?,day_of_timeout=? where borrow_book_id=? and record_id=?",record.getReturn_date(),record.getBack_or_not(),record.getDay_Of_Timeout(),record.getBorrow_book_id(),record.getRecord_id());
	}

	public void personalinformation(Readers reader) {
		reader.PrintReader();
	}
	
	public Readers GetInformation(Readers reader){
		ResultSet rs = Select("select * from readers where reader_id=?",reader.user_id);
		
		try {
			reader.user_name=rs.getString("reader_name");
			reader.borrow_book_num=rs.getString("borrow_book_num");
			reader.balance=rs.getString("balance");
			reader.address=rs.getString("address");
			reader.company=rs.getString("company");
		} catch (SQLException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
		return reader;
	}
	public ResultSet Select(String sql,String ...args) {
		DatabaseUtil Connect = new DatabaseUtil();
		Connection connect=null;
		connect = Connect.Connectsql(connect);
		ResultSet rs1 = null;
		try {
			PreparedStatement pstmt = connect.prepareStatement(sql);
			for(int i = 1;i <= args.length;i++) {
				pstmt.setString(i, args[i-1]);
			}
			rs1 = pstmt.executeQuery();
			rs1.next();
		} catch (SQLException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
		return rs1;
	}
	
	public void Update(String sql,String ...args) {
		DatabaseUtil Connect = new DatabaseUtil();
		Connection connect=null;
		connect = Connect.Connectsql(connect);
		try {
			PreparedStatement pstmt = connect.prepareStatement(sql);
			for(int i = 1;i <= args.length;i++) {
				pstmt.setString(i, args[i-1]);
			}
			pstmt.executeUpdate();
			connect.close();
		} catch (SQLException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
	}
	
	public void Update_back(String balance,String num,String reader_id) {
		DatabaseUtil Connect = new DatabaseUtil();
		Connection connect=null;
		connect = Connect.Connectsql(connect);
		try {
			PreparedStatement pstmt = connect.prepareStatement("update readers set balance=?,borrow_book_num=? where reader_id=?");
			pstmt.setFloat(1, Float.parseFloat(balance));
			pstmt.setInt(2, Integer.parseInt(num));
			pstmt.setString(3, reader_id);
			pstmt.executeUpdate();
			connect.close();
		} catch (SQLException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
	}
	
	public void Update_borrow(String num,String reader_id) {
		DatabaseUtil Connect = new DatabaseUtil();
		Connection connect=null;
		connect = Connect.Connectsql(connect);
		try {
			PreparedStatement pstmt = connect.prepareStatement("update readers set borrow_book_num=? where reader_id=?");
			pstmt.setInt(1, Integer.parseInt(num));
			pstmt.setString(2, reader_id);
			pstmt.executeUpdate();
			connect.close();
		} catch (SQLException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
	}
	
	public void Update_result(String result,String book_id) {
		DatabaseUtil Connect = new DatabaseUtil();
		Connection connect=null;
		connect = Connect.Connectsql(connect);
		try {
			PreparedStatement pstmt = connect.prepareStatement("update books set result=? where book_id=?");
			pstmt.setInt(1, Integer.parseInt(result));
			pstmt.setString(2, book_id);
			pstmt.executeUpdate();
			connect.close();
		} catch (SQLException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
	}
	
	private void Load_Record() {
		ResultSet rs = Select("select * from borrow_record");
		try {
			if(!rs.first()) {
				System.out.println("no record");
				return;
			}
			 do {
				Borrow_Records record = new Borrow_Records(rs.getString("record_id"),rs.getString("borrow_reader_id"),rs.getString("borrow_book_id"),rs.getString("borrow_date"),
						rs.getString("return_date"),rs.getString("back_or_not"),rs.getString("day_of_timeout"));
				Record_List.add(record);
			}while(rs.next());
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public void select_record(Readers reader) {
		ResultSet rs = Select("select * from borrow_record where borrow_reader_id=?",reader.user_id);
		try {
			if(!rs.first()) {
				System.out.println("no record");
				return;
			}
			do {
				System.out.println(rs.getString("record_id")+" "+rs.getString("borrow_reader_id")+" "+rs.getString("borrow_book_id")+" "+rs.getString("borrow_date")+" "+
						rs.getString("return_date")+" "+rs.getString("back_or_not")+" "+rs.getString("day_of_timeout"));
			}while(rs.next());
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public boolean reader_register(Readers reader) {
		
		ResultSet rs = Select("select reader_id from readers where reader_id=?",reader.user_id);
		try {
			if(!rs.first()) {
				DatabaseUtil Connect = new DatabaseUtil();
				Connection connect=null;
				connect = Connect.Connectsql(connect);
				String sql = new String();
				sql="insert into readers value(?,?,?,?,?,?,?)";
				PreparedStatement pstmt = connect.prepareStatement(sql);
				
				pstmt.setString(1, reader.user_id);
				pstmt.setString(2, reader.user_name);
				pstmt.setString(3, reader.user_password);
				pstmt.setInt(4, Integer.parseInt(reader.borrow_book_num));
				pstmt.setFloat(5, Float.valueOf(reader.balance));
				pstmt.setString(6, reader.address);
				pstmt.setString(7, reader.company);
				
				pstmt.executeUpdate();
				connect.close();
				
			}else {
				System.out.println("the id is exist");
				return false;
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		return true;
	}
}
